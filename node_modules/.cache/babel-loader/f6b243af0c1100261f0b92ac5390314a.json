{"ast":null,"code":"import _defineProperty from \"/Users/li2he1/Downloads/Redux-Thunk-Todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/li2he1/Downloads/Redux-Thunk-Todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/li2he1/Downloads/Redux-Thunk-Todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _extraReducers;\n\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport var getTodosAsync = createAsyncThunk('todos/getTodosAsync', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var response, todos;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch('http://localhost:7000/todos');\n\n        case 2:\n          response = _context.sent;\n\n          if (!response.ok) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 6;\n          return response.json();\n\n        case 6:\n          todos = _context.sent;\n          return _context.abrupt(\"return\", {\n            todos: todos\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})));\nexport var addTodoAsync = createAsyncThunk('todos/addTodoAsync', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload) {\n    var response, todo;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch('http://localhost:7000/todos', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                title: payload.title\n              })\n            });\n\n          case 2:\n            response = _context2.sent;\n\n            if (!response.ok) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 6;\n            return response.json();\n\n          case 6:\n            todo = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              todo: todo\n            });\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nvar todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [],\n  reducers: {\n    addTodo: function addTodo(state, action) {\n      var newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        completed: false\n      };\n      state.push(newTodo);\n    },\n    toggleComplete: function toggleComplete(state, action) {\n      var index = state.findIndex(function (todo) {\n        return todo.id === action.payload.id;\n      });\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: function deleteTodo(state, action) {\n      return state.filter(function (todo) {\n        return todo.id !== action.payload.id;\n      });\n    }\n  },\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, getTodosAsync.pending, function (state, action) {\n    console.log('fetching data...');\n  }), _defineProperty(_extraReducers, getTodosAsync.fulfilled, function (state, action) {\n    console.log('fetching data successfully!...');\n    return action.payload.todos;\n  }), _defineProperty(_extraReducers, addTodoAsync.fulfilled, function (state, action) {\n    state.push(action.payload.todo);\n  }), _extraReducers)\n});\nvar _todoSlice$actions = todoSlice.actions,\n    addTodo = _todoSlice$actions.addTodo,\n    toggleComplete = _todoSlice$actions.toggleComplete,\n    deleteTodo = _todoSlice$actions.deleteTodo;\nexport { addTodo, toggleComplete, deleteTodo };\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/Users/li2he1/Downloads/Redux-Thunk-Todo/src/redux/todoSlice.js"],"names":["createSlice","createAsyncThunk","getTodosAsync","fetch","response","ok","json","todos","addTodoAsync","payload","method","headers","body","JSON","stringify","title","todo","todoSlice","name","initialState","reducers","addTodo","state","action","newTodo","id","Date","now","completed","push","toggleComplete","index","findIndex","deleteTodo","filter","extraReducers","pending","console","log","fulfilled","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const getTodosAsync = createAsyncThunk(\n  'todos/getTodosAsync',\n  async () => {\n    const response = await fetch('http://localhost:7000/todos')\n    if(response.ok){\n      const todos = await response.json()\n      return {todos}\n    }\n  }\n)\n\nexport const addTodoAsync = createAsyncThunk(\n  'todos/addTodoAsync',\n  async(payload) =>{\n    const response = await fetch('http://localhost:7000/todos',{\n    method:'POST',\n    headers:{\n      'Content-Type': 'application/json',\n    },\n      body: JSON.stringify({title: payload.title}),\n    })\n    if (response.ok){\n      const todo = await response.json()\n      return {todo}\n    }\n  }\n)\n\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [ ],\n  reducers: {\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        completed: false\n      };\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const index = state.findIndex((todo) => todo.id === action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter((todo) => todo.id !== action.payload.id);\n    }\n  },\n  extraReducers: {\n    [getTodosAsync.pending]: (state, action) =>{\n      console.log('fetching data...')\n    },\n    [getTodosAsync.fulfilled]: (state, action) =>{\n      console.log('fetching data successfully!...')\n      return action.payload.todos\n    },\n    [addTodoAsync.fulfilled]: (state, action) =>{\n      state.push(action.payload.todo)\n    }\n  }\n});\n\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}